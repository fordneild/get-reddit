{"ast":null,"code":"var _jsxFileName = \"/Users/fordneild/workdir/get-reddit/src/Components/Feed/FeedController.js\";\nimport React, { useState, useEffect } from 'react';\nimport Feed from './index';\nimport fetchData from \"../../Services/useFetch\";\n\nconst FeedController = () => {\n  const [posts, setPosts] = useState([]); //on load, set posts\n\n  useEffect(() => {\n    const defaultSubs = ['ProgrammerHumor', 'memes', 'funny', 'facepalm', 'AdviceAnimals', 'MemeEconomy', 'ComedyCemetery', 'dankmemes'];\n\n    const loadPosts = async subs => {\n      const posts = await Promise.all(subs.map(async (sub, index) => {\n        return await fetchSubPosts(sub);\n      }));\n      const flatPosts = [].concat(...posts);\n      setPosts(flatPosts);\n    };\n\n    loadPosts(defaultSubs);\n  }, []);\n\n  const fetchSubPosts = async subName => {\n    const sub = await fetchData(`https://www.reddit.com/r/${subName}/.json?`);\n    return sub.data.children;\n  };\n\n  const getPosts = n => {\n    const toReturn = posts.slice(0, n);\n    console.log('toReturn', toReturn);\n    setPosts(prevPosts => {\n      prevPosts.splice(0, n);\n      return prevPosts;\n    });\n    return toReturn;\n  };\n\n  return React.createElement(Feed, {\n    getPosts: getPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  });\n};\n\nexport default FeedController;","map":{"version":3,"sources":["/Users/fordneild/workdir/get-reddit/src/Components/Feed/FeedController.js"],"names":["React","useState","useEffect","Feed","fetchData","FeedController","posts","setPosts","defaultSubs","loadPosts","subs","Promise","all","map","sub","index","fetchSubPosts","flatPosts","concat","subName","data","children","getPosts","n","toReturn","slice","console","log","prevPosts","splice"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAGA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC,CADyB,CAEzB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMM,WAAW,GAAG,CAAC,iBAAD,EAAmB,OAAnB,EAA2B,OAA3B,EAAmC,UAAnC,EAA8C,eAA9C,EAA8D,aAA9D,EAA4E,gBAA5E,EAA6F,WAA7F,CAApB;;AACA,UAAMC,SAAS,GAAG,MAAOC,IAAP,IAAgB;AAC9B,YAAMJ,KAAK,GAAG,MAAMK,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,GAAL,CAAS,OAAOC,GAAP,EAAYC,KAAZ,KAAsB;AAC3D,eAAO,MAAMC,aAAa,CAACF,GAAD,CAA1B;AACH,OAF+B,CAAZ,CAApB;AAGA,YAAMG,SAAS,GAAG,GAAGC,MAAH,CAAU,GAAGZ,KAAb,CAAlB;AACAC,MAAAA,QAAQ,CAACU,SAAD,CAAR;AAEH,KAPD;;AAQAR,IAAAA,SAAS,CAACD,WAAD,CAAT;AACH,GAXQ,EAWP,EAXO,CAAT;;AAaA,QAAMQ,aAAa,GAAG,MAAMG,OAAN,IAAiB;AACnC,UAAML,GAAG,GAAG,MAAMV,SAAS,CAAE,4BAA2Be,OAAQ,SAArC,CAA3B;AACA,WAAOL,GAAG,CAACM,IAAJ,CAASC,QAAhB;AACH,GAHD;;AAMA,QAAMC,QAAQ,GAAIC,CAAD,IAAO;AACpB,UAAMC,QAAQ,GAAGlB,KAAK,CAACmB,KAAN,CAAY,CAAZ,EAAcF,CAAd,CAAjB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBH,QAAvB;AACAjB,IAAAA,QAAQ,CAACqB,SAAS,IAAI;AAClBA,MAAAA,SAAS,CAACC,MAAV,CAAiB,CAAjB,EAAmBN,CAAnB;AACA,aAAOK,SAAP;AACH,KAHO,CAAR;AAIA,WAAOJ,QAAP;AACH,GARD;;AAUA,SACI,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEF,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAIH,CApCD;;AAsCA,eAAejB,cAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Feed from './index'\nimport fetchData from \"../../Services/useFetch\";\n\n\nconst FeedController = () => {\n    const [posts, setPosts] = useState([])\n    //on load, set posts\n    useEffect(() => {\n        const defaultSubs = ['ProgrammerHumor','memes','funny','facepalm','AdviceAnimals','MemeEconomy','ComedyCemetery','dankmemes']\n        const loadPosts = async (subs) => {\n            const posts = await Promise.all(subs.map(async (sub, index) => {\n                return await fetchSubPosts(sub)\n            }))\n            const flatPosts = [].concat(...posts)\n            setPosts(flatPosts)\n            \n        }\n        loadPosts(defaultSubs)\n    },[])\n\n    const fetchSubPosts = async subName => {\n        const sub = await fetchData(`https://www.reddit.com/r/${subName}/.json?`);\n        return sub.data.children\n    };\n\n    \n    const getPosts = (n) => {\n        const toReturn = posts.slice(0,n)\n        console.log('toReturn',toReturn)\n        setPosts(prevPosts => {\n            prevPosts.splice(0,n)\n            return prevPosts\n        })\n        return toReturn\n    }\n\n    return(\n        <Feed getPosts={getPosts}/>\n\n    )\n}\n\nexport default FeedController"]},"metadata":{},"sourceType":"module"}