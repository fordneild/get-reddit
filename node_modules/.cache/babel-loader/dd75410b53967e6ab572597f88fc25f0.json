{"ast":null,"code":"var _jsxFileName = \"/Users/fordneild/workdir/get-reddit/src/Components/Feed/FeedController.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Feed from \"./index\";\nimport fetchData from \"../../Services/useFetch\";\n\nconst FeedController = () => {\n  //keep track of all posts we want to show to the user\n  const [posts, setPosts] = useState([]); //on load, set posts\n\n  useEffect(() => {\n    const defaultSubs = [\"memes\", \"funny\", \"AdviceAnimals\", \"MemeEconomy\", \"ComedyCemetery\", \"dankmemes\", \"ProgrammerHumor\", \"ImGoingToHellForThis\"];\n    const defaultInstgramSearches = [\"edgymemes\", \"spongebobmemes\"];\n    const defaultInstagramAccounts = [\"thefatjewish\", \"me_irl_bot_\", \"mytherapistsays\"];\n\n    const addPosts = newPosts => {\n      setPosts(prevPosts => {\n        const posts = [...prevPosts, ...newPosts];\n        shuffleArray(posts);\n        return posts;\n      });\n    };\n\n    const loadSubredditPosts = async subs => {\n      const redditPosts = await Promise.all(subs.map(async sub => {\n        return await fetchSubPosts(sub);\n      }));\n      const flatPosts = [].concat(...redditPosts).map(post => {\n        return {\n          // title: post.title,\n          url: post.url,\n          pipe: `r/${post.subreddit}`\n        };\n      });\n      addPosts(flatPosts);\n    };\n\n    const loadInstagramMemes = async (terms, accounts) => {\n      const instas = await Promise.all([...terms.map(async term => {\n        return await fetchInstagramHashTagPosts(term);\n      }), ...accounts.map(async account => {\n        return await fetchInstagramAccountPosts(account);\n      })]);\n      let cleanedInstas = [].concat(...instas).map(post => {\n        return {\n          title: null,\n          url: post.display_url,\n          pipe: post.pipe\n        };\n      });\n      addPosts(cleanedInstas);\n    };\n\n    loadInstagramMemes(defaultInstgramSearches, defaultInstagramAccounts);\n    loadSubredditPosts(defaultSubs);\n  }, []);\n\n  const shuffleArray = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  const fetchInstagramHashTagPosts = async term => {\n    const page = await fetchData(`https://www.instagram.com/explore/tags/${term}/?__a=1`);\n\n    try {\n      return page.graphql.hashtag.edge_hashtag_to_media.edges.filter(post => post.node.__typename === \"GraphImage\").map(post => {\n        post.node.pipe = `#${term}`;\n        return post.node;\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const fetchInstagramAccountPosts = async (account, num) => {\n    const page = await fetchData(`https://www.instagram.com/${account}/?__a=1`);\n\n    try {\n      let posts = page.graphql.user.edge_owner_to_timeline_media.edges.filter(post => post.node.__typename === \"GraphImage\").map(post => {\n        post.node.pipe = `@${account}`;\n        return post.node;\n      });\n      console.log(\"account\", posts);\n      return posts;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const fetchSubPosts = async subName => {\n    const sub = await fetchData(`https://www.reddit.com/r/${subName}/.json?`);\n    return sub.data.children.map(child => child.data).filter(post => {\n      return post && post.url && post.post_hint === \"image\";\n    });\n  };\n\n  const getPosts = n => {\n    const toReturn = posts.slice(0, n);\n    setPosts(prevPosts => {\n      prevPosts.splice(0, n);\n      return prevPosts;\n    });\n    return toReturn;\n  };\n\n  return React.createElement(Feed, {\n    getPosts: getPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  });\n};\n\nexport default FeedController;","map":{"version":3,"sources":["/Users/fordneild/workdir/get-reddit/src/Components/Feed/FeedController.js"],"names":["React","useState","useEffect","Feed","fetchData","FeedController","posts","setPosts","defaultSubs","defaultInstgramSearches","defaultInstagramAccounts","addPosts","newPosts","prevPosts","shuffleArray","loadSubredditPosts","subs","redditPosts","Promise","all","map","sub","fetchSubPosts","flatPosts","concat","post","url","pipe","subreddit","loadInstagramMemes","terms","accounts","instas","term","fetchInstagramHashTagPosts","account","fetchInstagramAccountPosts","cleanedInstas","title","display_url","array","i","length","j","Math","floor","random","temp","page","graphql","hashtag","edge_hashtag_to_media","edges","filter","node","__typename","e","console","log","num","user","edge_owner_to_timeline_media","subName","data","children","child","post_hint","getPosts","n","toReturn","slice","splice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Feed from \"./index\";\nimport fetchData from \"../../Services/useFetch\";\n\nconst FeedController = () => {\n  //keep track of all posts we want to show to the user\n  const [posts, setPosts] = useState([]);\n\n  //on load, set posts\n  useEffect(() => {\n    const defaultSubs = [\n      \"memes\",\n      \"funny\",\n      \"AdviceAnimals\",\n      \"MemeEconomy\",\n      \"ComedyCemetery\",\n      \"dankmemes\",\n      \"ProgrammerHumor\",\n      \"ImGoingToHellForThis\"\n    ];\n    const defaultInstgramSearches = [\"edgymemes\",\"spongebobmemes\"];\n    const defaultInstagramAccounts = [\"thefatjewish\",\"me_irl_bot_\",\"mytherapistsays\"]\n    const addPosts = newPosts => {\n      setPosts(prevPosts => {\n        const posts = [...prevPosts, ...newPosts];\n        shuffleArray(posts);\n        return posts;\n      });\n    };\n    const loadSubredditPosts = async subs => {\n      const redditPosts = await Promise.all(\n        subs.map(async sub => {\n          return await fetchSubPosts(sub);\n        })\n      );\n      const flatPosts = [].concat(...redditPosts).map(post => {\n        return {\n          // title: post.title,\n          url: post.url,\n          pipe: `r/${post.subreddit}`\n        };\n      });\n      addPosts(flatPosts);\n    };\n\n    const loadInstagramMemes = async (terms, accounts) => {\n      const instas = await Promise.all(\n        [...terms.map(async term => {\n          return await fetchInstagramHashTagPosts(term);\n        }),...accounts.map(async account => {\n          return await fetchInstagramAccountPosts(account);\n        })]\n      );\n      let cleanedInstas = [].concat(...instas).map(post => {\n        return {\n          title: null,\n          url: post.display_url,\n          pipe: post.pipe\n        };\n      });\n      addPosts(cleanedInstas);\n    };\n\n    loadInstagramMemes(defaultInstgramSearches,defaultInstagramAccounts);\n    loadSubredditPosts(defaultSubs);\n  }, []);\n\n  const shuffleArray = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  const fetchInstagramHashTagPosts = async term => {\n    const page = await fetchData(\n      `https://www.instagram.com/explore/tags/${term}/?__a=1`\n    );\n    try {\n      return page.graphql.hashtag.edge_hashtag_to_media.edges\n        .filter(post => post.node.__typename === \"GraphImage\")\n        .map(post => {\n          post.node.pipe = `#${term}`;\n          return post.node;\n        });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const fetchInstagramAccountPosts = async (account, num) => {\n    const page = await fetchData(`https://www.instagram.com/${account}/?__a=1`);\n    try {\n      let posts = page.graphql.user.edge_owner_to_timeline_media.edges\n        .filter(post => post.node.__typename === \"GraphImage\")\n        .map(post => {\n          post.node.pipe = `@${account}`;\n          return post.node;\n        });\n      console.log(\"account\", posts);\n      return posts;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const fetchSubPosts = async subName => {\n    const sub = await fetchData(`https://www.reddit.com/r/${subName}/.json?`);\n    return sub.data.children\n      .map(child => child.data)\n      .filter(post => {\n        return post && post.url && post.post_hint === \"image\";\n      });\n  };\n\n  const getPosts = n => {\n    const toReturn = posts.slice(0, n);\n    setPosts(prevPosts => {\n      prevPosts.splice(0, n);\n      return prevPosts;\n    });\n    return toReturn;\n  };\n\n  return <Feed getPosts={getPosts} />;\n};\n\nexport default FeedController;\n"]},"metadata":{},"sourceType":"module"}