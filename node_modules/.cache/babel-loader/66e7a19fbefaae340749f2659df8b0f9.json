{"ast":null,"code":"var _jsxFileName = \"/Users/fordneild/workdir/get-reddit/src/Components/Feed/FeedController.js\";\nimport React, { useState, useEffect } from 'react';\nimport Feed from './index';\nimport fetchData from \"../../Services/useFetch\";\n\nconst FeedController = () => {\n  const [posts, setPosts] = useState([]); //on load, set posts\n\n  useEffect(() => {\n    const defaultSubs = ['memes', 'funny', 'AdviceAnimals', 'MemeEconomy', 'ComedyCemetery', 'dankmemes', 'BlackPeopleTwitter'];\n\n    const loadPosts = async subs => {\n      const posts = await Promise.all(subs.map(async (sub, index) => {\n        return await fetchSubPosts(sub);\n      }));\n      const flatPosts = [].concat(...posts);\n      setPosts(shuffleArray(flatPosts));\n    };\n\n    loadPosts(defaultSubs);\n  }, []);\n\n  const shuffleArray = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  const fetchSubPosts = async subName => {\n    const sub = await fetchData(`https://www.reddit.com/r/${subName}/.json?`);\n    return sub.data.children.map(child => child.data);\n  };\n\n  const getPosts = n => {\n    const toReturn = posts.slice(0, n);\n    setPosts(prevPosts => {\n      prevPosts.splice(0, n);\n      return prevPosts;\n    });\n    return toReturn;\n  };\n\n  return React.createElement(Feed, {\n    getPosts: getPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  });\n};\n\nexport default FeedController;","map":{"version":3,"sources":["/Users/fordneild/workdir/get-reddit/src/Components/Feed/FeedController.js"],"names":["React","useState","useEffect","Feed","fetchData","FeedController","posts","setPosts","defaultSubs","loadPosts","subs","Promise","all","map","sub","index","fetchSubPosts","flatPosts","concat","shuffleArray","array","i","length","j","Math","floor","random","temp","subName","data","children","child","getPosts","n","toReturn","slice","prevPosts","splice"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAGA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC,CADyB,CAEzB;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMM,WAAW,GAAG,CAAC,OAAD,EAAS,OAAT,EAAiB,eAAjB,EAAiC,aAAjC,EAA+C,gBAA/C,EAAgE,WAAhE,EAA4E,oBAA5E,CAApB;;AACA,UAAMC,SAAS,GAAG,MAAOC,IAAP,IAAgB;AAC9B,YAAMJ,KAAK,GAAG,MAAMK,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,GAAL,CAAS,OAAOC,GAAP,EAAYC,KAAZ,KAAsB;AAC3D,eAAO,MAAMC,aAAa,CAACF,GAAD,CAA1B;AACH,OAF+B,CAAZ,CAApB;AAGA,YAAMG,SAAS,GAAG,GAAGC,MAAH,CAAU,GAAGZ,KAAb,CAAlB;AACAC,MAAAA,QAAQ,CAACY,YAAY,CAACF,SAAD,CAAb,CAAR;AACH,KAND;;AAOAR,IAAAA,SAAS,CAACD,WAAD,CAAT;AAEH,GAXQ,EAWP,EAXO,CAAT;;AAaA,QAAMW,YAAY,GAAIC,KAAD,IAAW;AAC5B,SAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAe,CAA5B,EAA+BD,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACvC,UAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,UAAIM,IAAI,GAAGP,KAAK,CAACC,CAAD,CAAhB;AACAD,MAAAA,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACG,CAAD,CAAhB;AACAH,MAAAA,KAAK,CAACG,CAAD,CAAL,GAAWI,IAAX;AACH;AACJ,GAPD;;AAQA,QAAMX,aAAa,GAAG,MAAMY,OAAN,IAAiB;AACnC,UAAMd,GAAG,GAAG,MAAMV,SAAS,CAAE,4BAA2BwB,OAAQ,SAArC,CAA3B;AACA,WAAOd,GAAG,CAACe,IAAJ,CAASC,QAAT,CAAkBjB,GAAlB,CAAsBkB,KAAK,IAAIA,KAAK,CAACF,IAArC,CAAP;AACH,GAHD;;AAKA,QAAMG,QAAQ,GAAIC,CAAD,IAAO;AACpB,UAAMC,QAAQ,GAAG5B,KAAK,CAAC6B,KAAN,CAAY,CAAZ,EAAcF,CAAd,CAAjB;AACA1B,IAAAA,QAAQ,CAAC6B,SAAS,IAAI;AAClBA,MAAAA,SAAS,CAACC,MAAV,CAAiB,CAAjB,EAAmBJ,CAAnB;AACA,aAAOG,SAAP;AACH,KAHO,CAAR;AAIA,WAAOF,QAAP;AACH,GAPD;;AASA,SACI,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEF,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CA1CD;;AA4CA,eAAe3B,cAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Feed from './index'\nimport fetchData from \"../../Services/useFetch\";\n\n\nconst FeedController = () => {\n    const [posts, setPosts] = useState([])\n    //on load, set posts\n\n    useEffect(() => {\n        const defaultSubs = ['memes','funny','AdviceAnimals','MemeEconomy','ComedyCemetery','dankmemes','BlackPeopleTwitter']\n        const loadPosts = async (subs) => {\n            const posts = await Promise.all(subs.map(async (sub, index) => {\n                return await fetchSubPosts(sub)\n            }))\n            const flatPosts = [].concat(...posts)\n            setPosts(shuffleArray(flatPosts))\n        }\n        loadPosts(defaultSubs)\n        \n    },[])\n\n    const shuffleArray = (array) => {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n    const fetchSubPosts = async subName => {\n        const sub = await fetchData(`https://www.reddit.com/r/${subName}/.json?`);\n        return sub.data.children.map(child => child.data)\n    };\n    \n    const getPosts = (n) => {\n        const toReturn = posts.slice(0,n)\n        setPosts(prevPosts => {\n            prevPosts.splice(0,n)\n            return prevPosts\n        })\n        return toReturn\n    }\n\n    return(\n        <Feed getPosts={getPosts}/>\n    )\n}\n\nexport default FeedController"]},"metadata":{},"sourceType":"module"}