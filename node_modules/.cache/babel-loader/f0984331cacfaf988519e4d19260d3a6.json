{"ast":null,"code":"var _jsxFileName = \"/Users/fordneild/workdir/get-reddit/src/Components/Form/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport LocalStorage from \"../../Services/LocalStorage\";\nimport \"./Form.scss\";\n\nconst Form = ({\n  LSKey,\n  title,\n  defaults,\n  addPosts,\n  fetch,\n  removePostByPipe\n}) => {\n  //list entries\n  const [entries, setEntires] = useState({}); //text in input\n\n  const [formData, setFormData] = useState(\"\"); //load entries from local storage on mount\n\n  useEffect(() => {\n    const loadEntires = async () => {\n      const LSEntries = await LocalStorage.get(LSKey);\n\n      if (LSEntries !== null) {\n        //entires were in local\n        setEntires(LSEntries);\n      } else {\n        //use defaults\n        setEntires(defaults); //set entires in local\n\n        LocalStorage.set(LSKey, defaults);\n      }\n    };\n\n    loadEntires();\n  }, [LSKey, defaults]);\n\n  const refresh = async () => {\n    const LSEntries = await LocalStorage.get(LSKey);\n    setEntires(LSEntries);\n  };\n\n  const handleChange = e => {\n    setFormData(e.target.value);\n  };\n\n  const appendEntry = async entry => {\n    await LocalStorage.set(LSKey, [entry, ...entries]);\n    refresh();\n    const newPosts = await fetch(entry);\n    addPosts(newPosts);\n  };\n\n  const removeEntry = async entryToRemove => {\n    await LocalStorage.set(LSKey, entries.slice(0).filter(entry => entry !== entryToRemove));\n    refresh();\n    removePostByPipe(entryToRemove);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    appendEntry(formData);\n    setFormData(\"\");\n  };\n\n  return React.createElement(\"div\", {\n    className: \"form--container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, LSKey, \" name:\", \" \", React.createElement(\"input\", {\n    placeholder: \"ProgrammerHumor, memes, EarthPorn\",\n    name: \"sub\",\n    type: \"text\",\n    value: formData,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }))), entries && entries.length > 0 && React.createElement(\"ul\", {\n    className: \"entires\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, entries.map((entry, index) => {\n    return React.createElement(\"li\", {\n      key: index,\n      onClick: () => {\n        removeEntry(entry);\n      },\n      className: \"entry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, entry);\n  })));\n};\n\nexport default Form;","map":{"version":3,"sources":["/Users/fordneild/workdir/get-reddit/src/Components/Form/index.js"],"names":["React","useState","useEffect","LocalStorage","Form","LSKey","title","defaults","addPosts","fetch","removePostByPipe","entries","setEntires","formData","setFormData","loadEntires","LSEntries","get","set","refresh","handleChange","e","target","value","appendEntry","entry","newPosts","removeEntry","entryToRemove","slice","filter","handleSubmit","preventDefault","length","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport LocalStorage from \"../../Services/LocalStorage\";\nimport \"./Form.scss\";\n\nconst Form = ({ LSKey, title, defaults, addPosts, fetch , removePostByPipe}) => {\n  //list entries\n  const [entries, setEntires] = useState({});\n  //text in input\n  const [formData, setFormData] = useState(\"\");\n\n  //load entries from local storage on mount\n  useEffect(() => {\n    const loadEntires = async () => {\n      const LSEntries = await LocalStorage.get(LSKey);\n      if (LSEntries !== null) { \n        //entires were in local\n        setEntires(LSEntries);\n      } else {\n        //use defaults\n        setEntires(defaults);\n        //set entires in local\n        LocalStorage.set(LSKey, defaults);\n      }\n    };\n    loadEntires();\n  }, [LSKey, defaults]);\n\n  const refresh = async () => {\n    const LSEntries = await LocalStorage.get(LSKey);\n    setEntires(LSEntries);\n  };\n\n  const handleChange = e => {\n    setFormData(e.target.value);\n  };\n\n  const appendEntry = async entry => {\n    await LocalStorage.set(LSKey, [entry, ...entries]);\n    refresh();\n    const newPosts = await fetch(entry);\n    addPosts(newPosts);\n  };\n\n  const removeEntry = async entryToRemove => {\n    await LocalStorage.set(\n      LSKey,\n      entries.slice(0).filter(entry => entry !== entryToRemove)\n    );\n    refresh();\n    removePostByPipe(entryToRemove)\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    appendEntry(formData);\n    setFormData(\"\");\n  };\n\n  return (\n    <div className=\"form--container\">\n      <form onSubmit={handleSubmit}>\n        <label>\n          {LSKey} name:{\" \"}\n          <input\n            placeholder=\"ProgrammerHumor, memes, EarthPorn\"\n            name=\"sub\"\n            type=\"text\"\n            value={formData}\n            onChange={handleChange}\n          />\n        </label>\n      </form>\n      {entries && entries.length > 0 && (\n        <ul className=\"entires\">\n          {entries.map((entry, index) => {\n            return (\n              <li\n                key={index}\n                onClick={() => {\n                  removeEntry(entry);\n                }}\n                className=\"entry\"\n              >\n                {entry}\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}