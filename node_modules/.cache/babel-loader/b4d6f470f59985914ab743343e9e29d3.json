{"ast":null,"code":"var _jsxFileName = \"/Users/fordneild/workdir/get-reddit/src/Components/Feed/FeedController.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Feed from \"./index\";\nimport fetchData from \"../../Services/useFetch\";\n\nconst FeedController = () => {\n  //keep track of all posts we want to show to the user\n  const [posts, setPosts] = useState([]); //on load, set posts\n\n  useEffect(() => {\n    const defaultSubs = [\"memes\", \"funny\", \"AdviceAnimals\", \"MemeEconomy\", \"ComedyCemetery\", \"dankmemes\", \"ProgrammerHumor\", \"ImGoingToHellForThis\"];\n    const defaultInstgramSearches = [\"memes\", \"dankmemes\"];\n\n    const addPosts = newPosts => {\n      setPosts(prevPosts => {\n        const posts = [...prevPosts, ...newPosts];\n        shuffleArray(posts);\n        return posts;\n      });\n    };\n\n    const loadSubredditPosts = async subs => {\n      const redditPosts = await Promise.all(subs.map(async sub => {\n        return await fetchSubPosts(sub);\n      }));\n      const flatPosts = [].concat(...redditPosts).map(post => {\n        return {\n          // title: post.title,\n          url: post.url,\n          pipe: `r/${post.subreddit}`\n        };\n      });\n      addPosts(flatPosts);\n    };\n\n    const loadInstagramMemes = async terms => {\n      const instas = await Promise.all([...terms.map(async term => {\n        return await fetchInstagramPosts(term);\n      })]);\n      let cleanedInstas = [].concat(...instas).map(post => {\n        return {\n          title: null,\n          url: post.display_url,\n          pipe: post.pipe\n        };\n      });\n      addPosts(cleanedInstas);\n    };\n\n    loadInstagramMemes(defaultInstgramSearches);\n    loadSubredditPosts(defaultSubs);\n    fetchInstagramAccountPosts(\"thefatjewish\", 10);\n  }, []);\n\n  const shuffleArray = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  const fetchInstagramPosts = async term => {\n    const page = await fetchData(`https://www.instagram.com/explore/tags/${term}/?__a=1`);\n\n    try {\n      return page.graphql.hashtag.edge_hashtag_to_media.edges.filter(post => post.node.__typename === \"GraphImage\").map(post => {\n        post.node.pipe = `#${term}`;\n        return post.node;\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const fetchInstagramAccountPosts = async (account, num) => {\n    const page = await fetchData(`https://www.instagram.com/${account}/?__a=1`);\n\n    try {\n      let posts = page.graphql.user.edge_owner_to_timeline_media.edges.filter(post => post.node.__typename === \"GraphImage\").map(post => {\n        post.node.pipe = `@${account}`;\n        return post.node;\n      });\n      console.log(\"account\", posts);\n      return posts;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const fetchSubPosts = async subName => {\n    const sub = await fetchData(`https://www.reddit.com/r/${subName}/.json?`);\n    return sub.data.children.map(child => child.data).filter(post => {\n      return post && post.url && post.post_hint === \"image\";\n    });\n  };\n\n  const getPosts = n => {\n    const toReturn = posts.slice(0, n);\n    setPosts(prevPosts => {\n      prevPosts.splice(0, n);\n      return prevPosts;\n    });\n    return toReturn;\n  };\n\n  return React.createElement(Feed, {\n    getPosts: getPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  });\n};\n\nexport default FeedController;","map":{"version":3,"sources":["/Users/fordneild/workdir/get-reddit/src/Components/Feed/FeedController.js"],"names":["React","useState","useEffect","Feed","fetchData","FeedController","posts","setPosts","defaultSubs","defaultInstgramSearches","addPosts","newPosts","prevPosts","shuffleArray","loadSubredditPosts","subs","redditPosts","Promise","all","map","sub","fetchSubPosts","flatPosts","concat","post","url","pipe","subreddit","loadInstagramMemes","terms","instas","term","fetchInstagramPosts","cleanedInstas","title","display_url","fetchInstagramAccountPosts","array","i","length","j","Math","floor","random","temp","page","graphql","hashtag","edge_hashtag_to_media","edges","filter","node","__typename","e","console","log","account","num","user","edge_owner_to_timeline_media","subName","data","children","child","post_hint","getPosts","n","toReturn","slice","splice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Feed from \"./index\";\nimport fetchData from \"../../Services/useFetch\";\n\nconst FeedController = () => {\n  //keep track of all posts we want to show to the user\n  const [posts, setPosts] = useState([]);\n\n  //on load, set posts\n  useEffect(() => {\n    const defaultSubs = [\n      \"memes\",\n      \"funny\",\n      \"AdviceAnimals\",\n      \"MemeEconomy\",\n      \"ComedyCemetery\",\n      \"dankmemes\",\n      \"ProgrammerHumor\",\n      \"ImGoingToHellForThis\"\n    ];\n    const defaultInstgramSearches = [\"memes\", \"dankmemes\"];\n    const addPosts = newPosts => {\n      setPosts(prevPosts => {\n        const posts = [...prevPosts, ...newPosts];\n        shuffleArray(posts);\n        return posts;\n      });\n    };\n    const loadSubredditPosts = async subs => {\n      const redditPosts = await Promise.all(\n        subs.map(async sub => {\n          return await fetchSubPosts(sub);\n        })\n      );\n      const flatPosts = [].concat(...redditPosts).map(post => {\n        return {\n          // title: post.title,\n          url: post.url,\n          pipe: `r/${post.subreddit}`\n        };\n      });\n      addPosts(flatPosts);\n    };\n\n    const loadInstagramMemes = async terms => {\n      const instas = await Promise.all(\n        [...terms.map(async term => {\n          return await fetchInstagramPosts(term);\n        })]\n      );\n      let cleanedInstas = [].concat(...instas).map(post => {\n        return {\n          title: null,\n          url: post.display_url,\n          pipe: post.pipe\n        };\n      });\n      addPosts(cleanedInstas);\n    };\n\n    loadInstagramMemes(defaultInstgramSearches);\n    loadSubredditPosts(defaultSubs);\n    fetchInstagramAccountPosts(\"thefatjewish\", 10);\n  }, []);\n\n  const shuffleArray = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  const fetchInstagramPosts = async term => {\n    const page = await fetchData(\n      `https://www.instagram.com/explore/tags/${term}/?__a=1`\n    );\n    try {\n      return page.graphql.hashtag.edge_hashtag_to_media.edges\n        .filter(post => post.node.__typename === \"GraphImage\")\n        .map(post => {\n          post.node.pipe = `#${term}`;\n          return post.node;\n        });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const fetchInstagramAccountPosts = async (account, num) => {\n    const page = await fetchData(`https://www.instagram.com/${account}/?__a=1`);\n    try {\n      let posts = page.graphql.user.edge_owner_to_timeline_media.edges\n        .filter(post => post.node.__typename === \"GraphImage\")\n        .map(post => {\n          post.node.pipe = `@${account}`;\n          return post.node;\n        });\n      console.log(\"account\", posts);\n      return posts;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const fetchSubPosts = async subName => {\n    const sub = await fetchData(`https://www.reddit.com/r/${subName}/.json?`);\n    return sub.data.children\n      .map(child => child.data)\n      .filter(post => {\n        return post && post.url && post.post_hint === \"image\";\n      });\n  };\n\n  const getPosts = n => {\n    const toReturn = posts.slice(0, n);\n    setPosts(prevPosts => {\n      prevPosts.splice(0, n);\n      return prevPosts;\n    });\n    return toReturn;\n  };\n\n  return <Feed getPosts={getPosts} />;\n};\n\nexport default FeedController;\n"]},"metadata":{},"sourceType":"module"}