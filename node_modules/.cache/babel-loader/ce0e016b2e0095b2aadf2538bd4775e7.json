{"ast":null,"code":"var _jsxFileName = \"/Users/fordneild/workdir/get-reddit/src/Components/Feed/FeedController.js\";\nimport React, { useState, useEffect } from 'react';\nimport Feed from './index';\nimport { debounce } from 'lodash';\nimport fetchData from \"../../Services/useFetch\";\n\nconst FeedController = () => {\n  const defaultSubs = ['memes', 'funny', 'facepalm', 'AdviceAnimals', 'MemeEconomy', 'ComedyCemetery', 'dankmemes'];\n  const [posts, setPosts] = useState([]); //on load, set posts\n\n  useEffect(() => {\n    loadPosts(defaultSubs);\n  }, []);\n\n  const fetchSubPosts = async subName => {\n    const sub = await fetchData(`https://www.reddit.com/r/${subName}/.json?`);\n    return sub.data.children;\n  };\n\n  const loadPosts = async subs => {\n    const posts = await Promise.all(subs.map(async (sub, index) => {\n      return await fetchSubPosts(sub);\n    }));\n    const flatPosts = [].concat(...posts);\n    console.log(flatPosts);\n    setPosts(flatPosts);\n  };\n\n  const servePosts = n => {\n    let served = posts.slice(0, n);\n    setPosts(prevPosts => {\n      served = prevPosts.splice(0, n);\n      return prevPosts;\n    });\n    return served;\n  };\n\n  return React.createElement(Feed, {\n    getPosts: servePosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  });\n};\n\nexport default FeedController;","map":{"version":3,"sources":["/Users/fordneild/workdir/get-reddit/src/Components/Feed/FeedController.js"],"names":["React","useState","useEffect","Feed","debounce","fetchData","FeedController","defaultSubs","posts","setPosts","loadPosts","fetchSubPosts","subName","sub","data","children","subs","Promise","all","map","index","flatPosts","concat","console","log","servePosts","n","served","slice","prevPosts","splice"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAAQC,QAAR,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAGA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAG,CAAC,OAAD,EAAS,OAAT,EAAiB,UAAjB,EAA4B,eAA5B,EAA4C,aAA5C,EAA0D,gBAA1D,EAA2E,WAA3E,CAApB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC,CAFyB,CAIzB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,SAAS,CAACH,WAAD,CAAT;AACH,GAFQ,EAEP,EAFO,CAAT;;AAMA,QAAMI,aAAa,GAAG,MAAMC,OAAN,IAAiB;AACnC,UAAMC,GAAG,GAAG,MAAMR,SAAS,CAAE,4BAA2BO,OAAQ,SAArC,CAA3B;AACA,WAAOC,GAAG,CAACC,IAAJ,CAASC,QAAhB;AACH,GAHD;;AAKA,QAAML,SAAS,GAAG,MAAOM,IAAP,IAAgB;AAC9B,UAAMR,KAAK,GAAG,MAAMS,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,GAAL,CAAS,OAAON,GAAP,EAAYO,KAAZ,KAAsB;AAC3D,aAAO,MAAMT,aAAa,CAACE,GAAD,CAA1B;AACH,KAF+B,CAAZ,CAApB;AAGA,UAAMQ,SAAS,GAAG,GAAGC,MAAH,CAAU,GAAGd,KAAb,CAAlB;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACAZ,IAAAA,QAAQ,CAACY,SAAD,CAAR;AACH,GAPD;;AASA,QAAMI,UAAU,GAAIC,CAAD,IAAO;AACtB,QAAIC,MAAM,GAAGnB,KAAK,CAACoB,KAAN,CAAY,CAAZ,EAAcF,CAAd,CAAb;AACAjB,IAAAA,QAAQ,CAACoB,SAAS,IAAI;AAClBF,MAAAA,MAAM,GAAGE,SAAS,CAACC,MAAV,CAAiB,CAAjB,EAAmBJ,CAAnB,CAAT;AACA,aAAOG,SAAP;AACH,KAHO,CAAR;AAIA,WAAOF,MAAP;AAEH,GARD;;AAWA,SACI,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEF,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CAvCD;;AAyCA,eAAenB,cAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Feed from './index'\nimport {debounce} from 'lodash'\nimport fetchData from \"../../Services/useFetch\";\n\n\nconst FeedController = () => {\n    const defaultSubs = ['memes','funny','facepalm','AdviceAnimals','MemeEconomy','ComedyCemetery','dankmemes']\n    const [posts, setPosts] = useState([])\n    \n    //on load, set posts\n    useEffect(() => {\n        loadPosts(defaultSubs)\n    },[])\n\n    \n    \n    const fetchSubPosts = async subName => {\n        const sub = await fetchData(`https://www.reddit.com/r/${subName}/.json?`);\n        return sub.data.children\n    };\n\n    const loadPosts = async (subs) => {\n        const posts = await Promise.all(subs.map(async (sub, index) => {\n            return await fetchSubPosts(sub)\n        }))\n        const flatPosts = [].concat(...posts)\n        console.log(flatPosts)\n        setPosts(flatPosts)\n    }\n\n    const servePosts = (n) => {\n        let served = posts.slice(0,n)\n        setPosts(prevPosts => {\n            served = prevPosts.splice(0,n)\n            return prevPosts\n        })\n        return served\n        \n    }\n\n    \n    return(\n        <Feed getPosts={servePosts}/>\n    )\n}\n\nexport default FeedController"]},"metadata":{},"sourceType":"module"}