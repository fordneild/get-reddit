{"ast":null,"code":"var _jsxFileName = \"/Users/fordneild/workdir/get-reddit/src/Components/Feed/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { debounce } from \"lodash\";\nimport \"./Feed.scss\";\nimport RedditPost from \"../RedditPost/index\";\n\nconst Feed = ({\n  getPosts = () => {}\n}) => {\n  const INTIAL_POSTS_NUM = 10;\n  const REFRESH_POSTS_NUM = 10; //maintain poses the user sees in the UI\n\n  const [posts, setPosts] = useState([]); //INTIAL POST LOADING\n\n  useEffect(() => {\n    const loadInitialPosts = async () => {\n      const newPosts = await getPosts(INTIAL_POSTS_NUM);\n      setPosts(newPosts);\n    };\n\n    loadInitialPosts(10);\n  }, [getPosts]);\n\n  const loadPosts = async n => {\n    const newPosts = await getPosts(n);\n    setPosts([...posts, ...newPosts]);\n  };\n\n  const handleScroll = debounce(() => {\n    if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100) {\n      //load posts when we get near the bottom\n      loadPosts(REFRESH_POSTS_NUM);\n    }\n  }, 100); //EVENT LISTENERS\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [handleScroll]);\n\n  const renderPosts = () => {\n    if (posts) {\n      return posts.map((post, index) => {\n        return React.createElement(RedditPost, {\n          key: index,\n          title: post.title,\n          src: post.url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        });\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"posts\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, renderPosts());\n};\n\nexport default Feed;","map":{"version":3,"sources":["/Users/fordneild/workdir/get-reddit/src/Components/Feed/index.js"],"names":["React","useEffect","useState","debounce","RedditPost","Feed","getPosts","INTIAL_POSTS_NUM","REFRESH_POSTS_NUM","posts","setPosts","loadInitialPosts","newPosts","loadPosts","n","handleScroll","window","innerHeight","scrollY","document","body","offsetHeight","addEventListener","removeEventListener","renderPosts","map","post","index","title","url"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAO,aAAP;AACA,OAAOC,UAAP,MAAuB,qBAAvB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,QAAQ,GAAG,MAAM,CAAE;AAArB,CAAD,KAA6B;AACxC,QAAMC,gBAAgB,GAAG,EAAzB;AACA,QAAMC,iBAAiB,GAAG,EAA1B,CAFwC,CAGxC;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC,CAJwC,CAMxC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,gBAAgB,GAAG,YAAY;AACnC,YAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACC,gBAAD,CAA/B;AACAG,MAAAA,QAAQ,CAACE,QAAD,CAAR;AACD,KAHD;;AAIAD,IAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,GANQ,EAMN,CAACL,QAAD,CANM,CAAT;;AAQA,QAAMO,SAAS,GAAG,MAAMC,CAAN,IAAW;AAC3B,UAAMF,QAAQ,GAAG,MAAMN,QAAQ,CAACQ,CAAD,CAA/B;AACAJ,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW,GAAGG,QAAd,CAAD,CAAR;AACD,GAHD;;AAKA,QAAMG,YAAY,GAAGZ,QAAQ,CAAC,MAAM;AAClC,QACEa,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACE,OAA5B,IACAC,QAAQ,CAACC,IAAT,CAAcC,YAAd,GAA6B,GAF/B,EAGE;AACA;AACAR,MAAAA,SAAS,CAACL,iBAAD,CAAT;AACD;AACF,GAR4B,EAQ1B,GAR0B,CAA7B,CApBwC,CA8BxC;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCP,YAAlC;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCR,YAArC;AACD,KAFD;AAGD,GALQ,EAKN,CAACA,YAAD,CALM,CAAT;;AAQA,QAAMS,WAAW,GAAG,MAAM;AACxB,QAAIf,KAAJ,EAAW;AACT,aAAOA,KAAK,CACTgB,GADI,CACA,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAClB,eAAO,oBAAC,UAAD;AAAY,UAAA,GAAG,EAAEA,KAAjB;AAAwB,UAAA,KAAK,EAAED,IAAI,CAACE,KAApC;AAA2C,UAAA,GAAG,EAAEF,IAAI,CAACG,GAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAHI,CAAP;AAID;AACF,GAPD;;AASA,SAAO;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBL,WAAW,EAAnC,CAAP;AACD,CAjDD;;AAmDA,eAAenB,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { debounce } from \"lodash\";\nimport \"./Feed.scss\";\nimport RedditPost from \"../RedditPost/index\";\n\nconst Feed = ({ getPosts = () => {} }) => {\n  const INTIAL_POSTS_NUM = 10;\n  const REFRESH_POSTS_NUM = 10;\n  //maintain poses the user sees in the UI\n  const [posts, setPosts] = useState([]);\n\n  //INTIAL POST LOADING\n  useEffect(() => {\n    const loadInitialPosts = async () => {\n      const newPosts = await getPosts(INTIAL_POSTS_NUM);\n      setPosts(newPosts);\n    };\n    loadInitialPosts(10);\n  }, [getPosts]);\n\n  const loadPosts = async n => {\n    const newPosts = await getPosts(n);\n    setPosts([...posts, ...newPosts]);\n  };\n\n  const handleScroll = debounce(() => {\n    if (\n      window.innerHeight + window.scrollY >=\n      document.body.offsetHeight - 100\n    ) {\n      //load posts when we get near the bottom\n      loadPosts(REFRESH_POSTS_NUM);\n    }\n  }, 100);\n\n  //EVENT LISTENERS\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [handleScroll]);\n\n\n  const renderPosts = () => {\n    if (posts) {\n      return posts\n        .map((post, index) => {\n            return <RedditPost key={index} title={post.title} src={post.url} />;\n        });\n    }\n  };\n\n  return <div className=\"posts\">{renderPosts()}</div>;\n};\n\nexport default Feed;\n"]},"metadata":{},"sourceType":"module"}