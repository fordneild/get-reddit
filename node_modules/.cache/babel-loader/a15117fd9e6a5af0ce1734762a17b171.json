{"ast":null,"code":"var _jsxFileName = \"/Users/fordneild/workdir/get-reddit/src/Components/Feed/FeedController.js\";\nimport React, { useState, useEffect } from 'react';\nimport Feed from './index';\nimport fetchData from \"../../Services/useFetch\";\n\nconst FeedController = () => {\n  const defaultSubs = ['memes', 'funny', 'facepalm', 'AdviceAnimals', 'MemeEconomy', 'ComedyCemetery', 'dankmemes'];\n  const [posts, setPosts] = useState([]);\n\n  const loadPosts = async subs => {\n    const posts = await Promise.all(subs.map(async (sub, index) => {\n      return await fetchSubPosts(sub);\n    }));\n    const flatPosts = [].concat(...posts);\n    setPosts(flatPosts);\n  }; //on load, set posts\n\n\n  useEffect(() => {\n    loadPosts(defaultSubs);\n  }, [loadPosts, defaultSubs]);\n\n  const fetchSubPosts = async subName => {\n    const sub = await fetchData(`https://www.reddit.com/r/${subName}/.json?`);\n    return sub.data.children;\n  };\n\n  const servePosts = n => {\n    let served = posts.slice(0, n);\n    setPosts(prevPosts => {\n      served = prevPosts.splice(0, n);\n      return prevPosts;\n    });\n    return served;\n  };\n\n  return React.createElement(Feed, {\n    getPosts: servePosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  });\n};\n\nexport default FeedController;","map":{"version":3,"sources":["/Users/fordneild/workdir/get-reddit/src/Components/Feed/FeedController.js"],"names":["React","useState","useEffect","Feed","fetchData","FeedController","defaultSubs","posts","setPosts","loadPosts","subs","Promise","all","map","sub","index","fetchSubPosts","flatPosts","concat","subName","data","children","servePosts","n","served","slice","prevPosts","splice"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAGA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAG,CAAC,OAAD,EAAS,OAAT,EAAiB,UAAjB,EAA4B,eAA5B,EAA4C,aAA5C,EAA0D,gBAA1D,EAA2E,WAA3E,CAApB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;;AAGA,QAAMQ,SAAS,GAAG,MAAOC,IAAP,IAAgB;AAC9B,UAAMH,KAAK,GAAG,MAAMI,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,GAAL,CAAS,OAAOC,GAAP,EAAYC,KAAZ,KAAsB;AAC3D,aAAO,MAAMC,aAAa,CAACF,GAAD,CAA1B;AACH,KAF+B,CAAZ,CAApB;AAGA,UAAMG,SAAS,GAAG,GAAGC,MAAH,CAAU,GAAGX,KAAb,CAAlB;AACAC,IAAAA,QAAQ,CAACS,SAAD,CAAR;AACH,GAND,CALyB,CAazB;;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,SAAS,CAACH,WAAD,CAAT;AACH,GAFQ,EAEP,CAACG,SAAD,EAAWH,WAAX,CAFO,CAAT;;AAMA,QAAMU,aAAa,GAAG,MAAMG,OAAN,IAAiB;AACnC,UAAML,GAAG,GAAG,MAAMV,SAAS,CAAE,4BAA2Be,OAAQ,SAArC,CAA3B;AACA,WAAOL,GAAG,CAACM,IAAJ,CAASC,QAAhB;AACH,GAHD;;AAOA,QAAMC,UAAU,GAAIC,CAAD,IAAO;AACtB,QAAIC,MAAM,GAAGjB,KAAK,CAACkB,KAAN,CAAY,CAAZ,EAAcF,CAAd,CAAb;AACAf,IAAAA,QAAQ,CAACkB,SAAS,IAAI;AAClBF,MAAAA,MAAM,GAAGE,SAAS,CAACC,MAAV,CAAiB,CAAjB,EAAmBJ,CAAnB,CAAT;AACA,aAAOG,SAAP;AACH,KAHO,CAAR;AAIA,WAAOF,MAAP;AAEH,GARD;;AAWA,SACI,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEF,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CAzCD;;AA2CA,eAAejB,cAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Feed from './index'\nimport fetchData from \"../../Services/useFetch\";\n\n\nconst FeedController = () => {\n    const defaultSubs = ['memes','funny','facepalm','AdviceAnimals','MemeEconomy','ComedyCemetery','dankmemes']\n    const [posts, setPosts] = useState([])\n    \n    \n    const loadPosts = async (subs) => {\n        const posts = await Promise.all(subs.map(async (sub, index) => {\n            return await fetchSubPosts(sub)\n        }))\n        const flatPosts = [].concat(...posts)\n        setPosts(flatPosts)\n    }\n    \n    //on load, set posts\n    useEffect(() => {\n        loadPosts(defaultSubs)\n    },[loadPosts,defaultSubs])\n\n    \n    \n    const fetchSubPosts = async subName => {\n        const sub = await fetchData(`https://www.reddit.com/r/${subName}/.json?`);\n        return sub.data.children\n    };\n\n    \n\n    const servePosts = (n) => {\n        let served = posts.slice(0,n)\n        setPosts(prevPosts => {\n            served = prevPosts.splice(0,n)\n            return prevPosts\n        })\n        return served\n        \n    }\n\n    \n    return(\n        <Feed getPosts={servePosts}/>\n    )\n}\n\nexport default FeedController"]},"metadata":{},"sourceType":"module"}