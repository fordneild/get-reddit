{"ast":null,"code":"var _jsxFileName = \"/Users/fordneild/workdir/get-reddit/src/Components/Feed/FeedController.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Feed from \"./index\";\nimport fetchData from \"../../Services/useFetch\";\n\nconst FeedController = () => {\n  //keep track of all posts we want to show to the user\n  const [posts, setPosts] = useState([]);\n\n  const addPosts = newPosts => {\n    setPosts(prevPosts => {\n      const posts = [...prevPosts, ...newPosts];\n      shuffleArray(posts);\n      return posts;\n    });\n  }; //on load, set posts\n\n\n  useEffect(() => {\n    const defaultSubs = [\"memes\", \"funny\", \"AdviceAnimals\", \"MemeEconomy\", \"ComedyCemetery\", \"dankmemes\", \"ProgrammerHumor\", \"ImGoingToHellForThis\"];\n    const defaultInstgramSearches = [\"memes\", \"dankmemes\"];\n\n    const shufflePosts = () => {};\n\n    const loadSubredditPosts = async subs => {\n      const redditPosts = await Promise.all(subs.map(async sub => {\n        return await fetchSubPosts(sub);\n      }));\n      const flatPosts = [].concat(...redditPosts);\n      addPosts(flatPosts);\n    };\n\n    const loadInstagramMemes = async terms => {\n      const instas = await Promise.all(terms.map(async term => {\n        return await fetchInstagramPosts(term);\n      }));\n      console.log(instas);\n      let cleanedInstas = [].concat(...instas).map(post => {\n        console.log(\"post\", post);\n        const toReturn = {\n          title: null,\n          url: post.display_url,\n          pipe: post.pipe\n        };\n        console.log(toReturn);\n        return toReturn;\n      });\n      addPosts(cleanedInstas);\n    };\n\n    loadInstagramMemes(defaultInstgramSearches); //loadSubredditPosts(defaultSubs)\n  }, []);\n\n  const shuffleArray = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  const fetchInstagramPosts = async term => {\n    const page = await fetchData(`https://www.instagram.com/explore/tags/${term}/?__a=1`);\n\n    try {\n      return page.graphql.hashtag.edge_hashtag_to_media.edges.filter(post => post.node.__typename === \"GraphImage\").map(post => {\n        post.node.pipe = `#${term}`;\n        return post.node;\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const fetchSubPosts = async subName => {\n    const sub = await fetchData(`https://www.reddit.com/r/${subName}/.json?`);\n    return sub.data.children.map(child => child.data).filter(post => {\n      return post && post.url && post.post_hint === \"image\";\n    });\n  };\n\n  const getPosts = n => {\n    const toReturn = posts.slice(0, n);\n    setPosts(prevPosts => {\n      prevPosts.splice(0, n);\n      return prevPosts;\n    });\n    return toReturn;\n  };\n\n  return React.createElement(Feed, {\n    getPosts: getPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  });\n};\n\nexport default FeedController;","map":{"version":3,"sources":["/Users/fordneild/workdir/get-reddit/src/Components/Feed/FeedController.js"],"names":["React","useState","useEffect","Feed","fetchData","FeedController","posts","setPosts","addPosts","newPosts","prevPosts","shuffleArray","defaultSubs","defaultInstgramSearches","shufflePosts","loadSubredditPosts","subs","redditPosts","Promise","all","map","sub","fetchSubPosts","flatPosts","concat","loadInstagramMemes","terms","instas","term","fetchInstagramPosts","console","log","cleanedInstas","post","toReturn","title","url","display_url","pipe","array","i","length","j","Math","floor","random","temp","page","graphql","hashtag","edge_hashtag_to_media","edges","filter","node","__typename","e","subName","data","children","child","post_hint","getPosts","n","slice","splice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Feed from \"./index\";\nimport fetchData from \"../../Services/useFetch\";\n\nconst FeedController = () => {\n  //keep track of all posts we want to show to the user\n  const [posts, setPosts] = useState([]);\n\n  const addPosts = newPosts => {\n    setPosts(prevPosts => {\n      const posts = [...prevPosts, ...newPosts]\n      shuffleArray(posts)\n      return posts\n    });\n  };\n\n  //on load, set posts\n  useEffect(() => {\n    const defaultSubs = [\n      \"memes\",\n      \"funny\",\n      \"AdviceAnimals\",\n      \"MemeEconomy\",\n      \"ComedyCemetery\",\n      \"dankmemes\",\n      \"ProgrammerHumor\",\n      \"ImGoingToHellForThis\"\n    ];\n    const defaultInstgramSearches = [\"memes\", \"dankmemes\"];\n    const shufflePosts = () => {\n      \n    }\n    const loadSubredditPosts = async subs => {\n      const redditPosts = await Promise.all(\n        subs.map(async sub => {\n          return await fetchSubPosts(sub);\n        })\n      );\n      const flatPosts = [].concat(...redditPosts);\n      addPosts(flatPosts);\n    };\n    const loadInstagramMemes = async terms => {\n      const instas = await Promise.all(\n        terms.map(async term => {\n          return await fetchInstagramPosts(term);\n        })\n      );\n      console.log(instas)\n      let cleanedInstas = [].concat(...instas).map(post => {\n        console.log(\"post\",post)\n        const toReturn = {\n          title: null,\n          url: post.display_url,\n          pipe: post.pipe\n        };\n        console.log(toReturn)\n        return toReturn\n      });\n      addPosts(cleanedInstas);\n    };\n\n    loadInstagramMemes(defaultInstgramSearches);\n    //loadSubredditPosts(defaultSubs)\n  }, []);\n\n  const shuffleArray = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  const fetchInstagramPosts = async term => {\n    const page = await fetchData(\n      `https://www.instagram.com/explore/tags/${term}/?__a=1`\n    );\n    try {\n      return page.graphql.hashtag.edge_hashtag_to_media.edges.filter(\n          post => post.node.__typename===\"GraphImage\"\n      )\n      .map(\n        post => {\n          post.node.pipe=`#${term}`;\n          return post.node }\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const fetchSubPosts = async subName => {\n    const sub = await fetchData(`https://www.reddit.com/r/${subName}/.json?`);\n    return sub.data.children\n      .map(child => child.data)\n      .filter(post => {\n        return post && post.url && post.post_hint === \"image\";\n      });\n  };\n\n  const getPosts = n => {\n    const toReturn = posts.slice(0, n);\n    setPosts(prevPosts => {\n      prevPosts.splice(0, n);\n      return prevPosts;\n    });\n    return toReturn;\n  };\n\n  return <Feed getPosts={getPosts} />;\n};\n\nexport default FeedController;\n"]},"metadata":{},"sourceType":"module"}