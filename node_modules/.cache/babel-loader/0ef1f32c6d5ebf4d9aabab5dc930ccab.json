{"ast":null,"code":"var _jsxFileName = \"/Users/fordneild/workdir/get-reddit/src/Components/Feed/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { debounce } from \"lodash\";\nimport \"./Feed.scss\";\nimport RedditPost from \"../RedditPost/index\";\n\nconst Feed = ({\n  getPosts = () => {}\n}) => {\n  //maintain poses the user sees in the UI\n  const [posts, setPosts] = useState([]); //INTIAL POST LOADING\n\n  useEffect(() => {\n    const loadInitialPosts = async () => {\n      const newPosts = await getPosts(10);\n      setPosts(newPosts);\n    };\n\n    loadInitialPosts(10);\n  }, [getPosts]);\n  const handleScroll = debounce(() => {\n    if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100) {\n      //load posts when we get near the bottom\n      loadPosts(10);\n    }\n  }, 100); //EVENT LISTENERS\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [handleScroll]);\n\n  const loadPosts = async n => {\n    const newPosts = await getPosts(n);\n    setPosts([...posts, ...newPosts]);\n  };\n\n  const renderPosts = () => {\n    if (posts) {\n      return posts.filter((post, index) => {\n        return post && post.url && post.post_hint === \"image\";\n      }).map((post, index) => {\n        return React.createElement(RedditPost, {\n          key: index,\n          title: post.title,\n          src: post.url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        });\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"posts\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, renderPosts());\n};\n\nexport default Feed;","map":{"version":3,"sources":["/Users/fordneild/workdir/get-reddit/src/Components/Feed/index.js"],"names":["React","useEffect","useState","debounce","RedditPost","Feed","getPosts","posts","setPosts","loadInitialPosts","newPosts","handleScroll","window","innerHeight","scrollY","document","body","offsetHeight","loadPosts","addEventListener","removeEventListener","n","renderPosts","filter","post","index","url","post_hint","map","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAO,aAAP;AACA,OAAOC,UAAP,MAAuB,qBAAvB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,QAAQ,GAAG,MAAM,CAAE;AAArB,CAAD,KAA6B;AACxC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC,CAFwC,CAIxC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,gBAAgB,GAAG,YAAY;AACnC,YAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAAC,EAAD,CAA/B;AACAE,MAAAA,QAAQ,CAACE,QAAD,CAAR;AACD,KAHD;;AAIAD,IAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,GANQ,EAMN,CAACH,QAAD,CANM,CAAT;AAQA,QAAMK,YAAY,GAAGR,QAAQ,CAAC,MAAM;AAClC,QACES,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACE,OAA5B,IACAC,QAAQ,CAACC,IAAT,CAAcC,YAAd,GAA6B,GAF/B,EAGE;AACA;AACAC,MAAAA,SAAS,CAAC,EAAD,CAAT;AACD;AACF,GAR4B,EAQ1B,GAR0B,CAA7B,CAbwC,CAuBxC;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkCR,YAAlC;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACQ,mBAAP,CAA2B,QAA3B,EAAqCT,YAArC;AACD,KAFD;AAGD,GALQ,EAKN,CAACA,YAAD,CALM,CAAT;;AAOA,QAAMO,SAAS,GAAG,MAAMG,CAAN,IAAW;AAC3B,UAAMX,QAAQ,GAAG,MAAMJ,QAAQ,CAACe,CAAD,CAA/B;AACAb,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW,GAAGG,QAAd,CAAD,CAAR;AACD,GAHD;;AAKA,QAAMY,WAAW,GAAG,MAAM;AACxB,QAAIf,KAAJ,EAAW;AACT,aAAOA,KAAK,CACTgB,MADI,CACG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACvB,eAAOD,IAAI,IAAIA,IAAI,CAACE,GAAb,IAAoBF,IAAI,CAACG,SAAL,KAAmB,OAA9C;AACD,OAHI,EAIJC,GAJI,CAIA,CAACJ,IAAD,EAAOC,KAAP,KAAiB;AACpB,eAAO,oBAAC,UAAD;AAAY,UAAA,GAAG,EAAEA,KAAjB;AAAwB,UAAA,KAAK,EAAED,IAAI,CAACK,KAApC;AAA2C,UAAA,GAAG,EAAEL,IAAI,CAACE,GAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OANI,CAAP;AAOD;AACF,GAVD;;AAYA,SAAO;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBJ,WAAW,EAAnC,CAAP;AACD,CAjDD;;AAmDA,eAAejB,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { debounce } from \"lodash\";\nimport \"./Feed.scss\";\nimport RedditPost from \"../RedditPost/index\";\n\nconst Feed = ({ getPosts = () => {} }) => {\n  //maintain poses the user sees in the UI\n  const [posts, setPosts] = useState([]);\n\n  //INTIAL POST LOADING\n  useEffect(() => {\n    const loadInitialPosts = async () => {\n      const newPosts = await getPosts(10);\n      setPosts(newPosts);\n    };\n    loadInitialPosts(10);\n  }, [getPosts]);\n\n  const handleScroll = debounce(() => {\n    if (\n      window.innerHeight + window.scrollY >=\n      document.body.offsetHeight - 100\n    ) {\n      //load posts when we get near the bottom\n      loadPosts(10);\n    }\n  }, 100);\n\n  //EVENT LISTENERS\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [handleScroll]);\n\n  const loadPosts = async n => {\n    const newPosts = await getPosts(n);\n    setPosts([...posts, ...newPosts]);\n  };\n\n  const renderPosts = () => {\n    if (posts) {\n      return posts\n        .filter((post, index) => {\n          return post && post.url && post.post_hint === \"image\";\n        })\n        .map((post, index) => {\n          return <RedditPost key={index} title={post.title} src={post.url} />;\n        });\n    }\n  };\n\n  return <div className=\"posts\">{renderPosts()}</div>;\n};\n\nexport default Feed;\n"]},"metadata":{},"sourceType":"module"}